<?php
/**
 * User: Belal Mostafa
 * Date: 04/01/17
 * Time: 12:23 PM
 */


namespace crud;
require_once 'config.php';

class DB {

    private $conn;
    protected $errors = array();

    /**
     * usage: this is an initiation function that initiates a the DB connection to be used by the client through the session
     * it takes no parameters
     * it reads 4 constants from another file called config.php where the DB credentials are set
     * @return \PDO connection on sucess and returns -1 otherwise
     */
    public static function init (){

        $serverName = HOST_NAME;
        $userName = USERNAME;
        $password = PASSWORD;
        $dbName = DATABASE_NAME;
        try{
            $conn = new \PDO("mysql:host=$serverName;dbname=".$dbName,$userName,$password);
            $conn->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);
            return $conn;
        }catch (\PDOException $e){

            return -1;
        }
	}

    /**
     * DB constructor.
     * @param $conn which was generated by the init static method
     */
    function __construct($conn)
    {
        $this->conn = $conn;
    }

    /**
     * @param $table: the name of the table from which we will select the data
     * @param array $args
     * @return array: returns the selected data, an error otherwise
     */
    public function select($table = NULL, $args = array()){

        if ($table){
            if (empty($args) && $table!=''){
                $query = 'SELECT * from '.$table;
                return $this->executeSelect($query);
            }
        }else{
            array_push($this->errors,'No table name was provided');
            return $this->errors;
        }
    }


    /**
     * @usage: used to take a MySql query, execute it, and return the results to be handled
     * @param $query: an SQL query that was built in another function
     * @return array of data on success, error otherwise
     */
    private function executeSelect($query){

        try{
            $stmt = $this->conn->prepare($query);
            $stmt->execute();
            $result = $stmt->setFetchMode(\PDO::FETCH_ASSOC);
            return $stmt->fetchAll();

        }catch (\PDOException $e){
            array_push($this->errors,$e->getMessage());
            return $this->errors;
        }

    }






}